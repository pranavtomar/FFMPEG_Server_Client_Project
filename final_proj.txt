Installations
sudo apt-get install ffmpeg libavformat-dev
sudo apt-get install ffmpeg libsdl2-dev
#########################################################################################
server....
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <libavformat/avformat.h>

#define MAX_BUFFER_SIZE 4096

int main() {
    // Initialize FFmpeg
    void av_register_all();

    // Open the input TS file
    AVFormatContext *formatContext = NULL;
    if (avformat_open_input(&formatContext, "sample.ts", NULL, NULL) < 0) {
        fprintf(stderr, "Failed to open input file\n");
        return 1;
    }
// Find the first video stream
    int videoStreamIndex = -1;
    for (int i = 0; i < formatContext->nb_streams; i++) {
        AVStream *stream = formatContext->streams[i];
        if (stream->codecpar->codec_type == AVMEDIA_TYPE_VIDEO && videoStreamIndex < 0) {
            videoStreamIndex = i;
            break;
        }
    }
    if (videoStreamIndex < 0) {
        fprintf(stderr, "Failed to find video stream\n");
        avformat_close_input(&formatContext);
        return 1;
    }
 // Create UDP socket
    int sockfd;
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("socket creation failed");
        avformat_close_input(&formatContext);
        return 1;
    }
// Set client address
    struct sockaddr_in clientAddr;
    memset(&clientAddr, 0, sizeof(clientAddr));
    clientAddr.sin_addr.s_addr=inet_addr("239.0.0.1");
    clientAddr.sin_family = AF_INET;
    clientAddr.sin_port = htons(8888);
// Read and send TS packets
    AVPacket packet;
    while (av_read_frame(formatContext, &packet) >= 0) {
        if (packet.stream_index == videoStreamIndex) {
            sendto(sockfd, packet.data, packet.size, 0, (const struct sockaddr *)&clientAddr, sizeof(clientAddr));
            usleep(1000);  // Delay to control the sending speed
        }
        av_packet_unref(&packet);
    }

    // Close the input file and socket
    avformat_close_input(&formatContext);
    close(sockfd);

    return 0;
}

#############################################################################################
client...........................

#include <stdio.h>
#include <stdlib.h>
#include <SDL2/SDL.h>
#include <libavformat/avformat.h>
#include <libavcodec/avcodec.h>

#define OUTPUT_FILENAME "received.ts"
#define VIDEO_WIDTH 640
#define VIDEO_HEIGHT 480

int main() {
    int ret;
    AVFormatContext *formatContext = NULL;
    AVCodecContext *videoCodecContext = NULL;
    AVCodec *videoCodec = NULL;
    AVPacket packet;
    AVFrame *frame = NULL;
    int videoStreamIndex = -1;

    const char *udpURL = "udp://239.0.0.1:8888";

    // Open UDP input stream
    ret = avformat_open_input(&formatContext, udpURL, NULL, NULL);
    if (ret < 0) {
        fprintf(stderr, "Failed to open UDP input stream: %s\n", av_err2str(ret));
        return ret;
    }

    // Retrieve stream information
    ret = avformat_find_stream_info(formatContext, NULL);
    if (ret < 0) {
        fprintf(stderr, "Failed to retrieve stream information: %s\n", av_err2str(ret));
        avformat_close_input(&formatContext);
        return ret;
    }

    // Find video stream index
    for (int i = 0; i < formatContext->nb_streams; i++) {
        AVCodecParameters *codecParameters = formatContext->streams[i]->codecpar;
        if (codecParameters->codec_type == AVMEDIA_TYPE_VIDEO && videoStreamIndex == -1) {
            videoStreamIndex = i;
            videoCodec = avcodec_find_decoder(codecParameters->codec_id);
            videoCodecContext = avcodec_alloc_context3(videoCodec);
            avcodec_parameters_to_context(videoCodecContext, codecParameters);
            avcodec_open2(videoCodecContext, videoCodec, NULL);
            break;
        }
    }

    // Open output file for storing the transport stream
    FILE *outputFile = fopen(OUTPUT_FILENAME, "wb");
    if (!outputFile) {
        fprintf(stderr, "Failed to open output file: %s\n", OUTPUT_FILENAME);
        avformat_close_input(&formatContext);
        avcodec_free_context(&videoCodecContext);
        return -1;
    }

    // Read packets from the stream and save them to the output file
    while (av_read_frame(formatContext, &packet) >= 0) {
        if (packet.stream_index == videoStreamIndex) {
            fwrite(packet.data, 1, packet.size, outputFile);
        }
        av_packet_unref(&packet);
    }

    // Close the output file
    fclose(outputFile);

    // Cleanup resources
    avformat_close_input(&formatContext);
    avcodec_free_context(&videoCodecContext);

    // Play the stored transport stream file using SDL
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        fprintf(stderr, "Failed to initialize SDL: %s\n", SDL_GetError());
        return -1;
    }

    SDL_Window *window = SDL_CreateWindow("Transport Stream Player", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
                                          VIDEO_WIDTH, VIDEO_HEIGHT, SDL_WINDOW_SHOWN);
    if (!window) {
        fprintf(stderr, "Failed to create SDL window: %s\n", SDL_GetError());
        SDL_Quit();
        return -1;
    }

    SDL_Renderer *renderer = SDL_CreateRenderer(window, -1, 0);
    if (!renderer) {
        fprintf(stderr, "Failed to create SDL renderer: %s\n", SDL_GetError());
        SDL_DestroyWindow(window);
        SDL_Quit();
        return -1;
    }

    SDL_Texture *texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_YV12, SDL_TEXTUREACCESS_STREAMING,
                                             VIDEO_WIDTH, VIDEO_HEIGHT);
    if (!texture) {
        fprintf(stderr, "Failed to create SDL texture: %s\n", SDL_GetError());
        SDL_DestroyRenderer(renderer);
        SDL_DestroyWindow(window);
        SDL_Quit();
        return -1;
    }

    // Open the stored transport stream file
    AVFormatContext *tsFormatContext = NULL;
    ret = avformat_open_input(&tsFormatContext, OUTPUT_FILENAME, NULL, NULL);
    if (ret < 0) {
        fprintf(stderr, "Failed to open transport stream file: %s\n", av_err2str(ret));
        SDL_DestroyTexture(texture);
        SDL_DestroyRenderer(renderer);
        SDL_DestroyWindow(window);
        SDL_Quit();
        return -1;
    }
// Find the video stream in the transport stream file
    ret = avformat_find_stream_info(tsFormatContext, NULL);
    if (ret < 0) {
        fprintf(stderr, "Failed to retrieve stream information from transport stream: %s\n", av_err2str(ret));
        avformat_close_input(&tsFormatContext);
        SDL_DestroyTexture(texture);
        SDL_DestroyRenderer(renderer);
        SDL_DestroyWindow(window);
        SDL_Quit();
        return -1;
    }

    int tsVideoStreamIndex = -1;
    for (int i = 0; i < tsFormatContext->nb_streams; i++) {
        if (tsFormatContext->streams[i]->codecpar->codec_type == AVMEDIA_TYPE_VIDEO) {
            tsVideoStreamIndex = i;
            break;
        }
    }

    // Read video frames from the transport stream file and display them using SDL
    while (av_read_frame(tsFormatContext, &packet) >= 0) {
        if (packet.stream_index == tsVideoStreamIndex) {
            AVFrame *frame = av_frame_alloc();
            ret = avcodec_send_packet(videoCodecContext, &packet);
            if (ret < 0) {
                fprintf(stderr, "Failed to send packet to video decoder: %s\n", av_err2str(ret));
                break;
            }

            ret = avcodec_receive_frame(videoCodecContext, frame);
            if (ret < 0) {
                fprintf(stderr, "Failed to receive frame from video decoder: %s\n", av_err2str(ret));
                break;
            }

            // Display the frame using SDL
            SDL_UpdateYUVTexture(texture, NULL, frame->data[0], frame->linesize[0],
                                 frame->data[1], frame->linesize[1],
                                 frame->data[2], frame->linesize[2]);
            SDL_RenderClear(renderer);
            SDL_RenderCopy(renderer, texture, NULL, NULL);
            SDL_RenderPresent(renderer);

            av_frame_unref(frame);
        }
        av_packet_unref(&packet);

        SDL_Event event;
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) {
                avformat_close_input(&tsFormatContext);
                SDL_DestroyTexture(texture);
                SDL_DestroyRenderer(renderer);
                SDL_DestroyWindow(window);
                SDL_Quit();
                return 0;
            }
        }
    }

    // Cleanup resources
    avformat_close_input(&tsFormatContext);
    SDL_DestroyTexture(texture);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}

.................................................................................
for server
install sample.ts file in the root
gcc -o server server.c -lavformat -lavcodec -lavutil
./server

...................................................
for client

gcc -o client client.c -lavformat -lavutil -lavcodec -lSDL2
./client
